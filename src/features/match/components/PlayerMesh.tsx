/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 player.glb -TtjM 
Command args: --types --transform --keepmeshes --keepmaterials
Files: player.glb [27.72MB] > C:\Users\immam\OneDrive\Documents\blender\character\player-transformed.glb [645.56KB] (98%)
*/
import { useGraph } from "@react-three/fiber";
import { useLayoutEffect, useRef } from "react";
import {
  CanvasTexture,
  MeshPhysicalMaterial,
  Object3D,
  RepeatWrapping,
} from "three";
import { MatchPlayer, TeamColors } from "../MatchData.model";
import { GLTFResult } from "./playerGltf.model";
import { useMaterialClone } from "./useMaterialClone";

export type PlayerProps = {
  colors: TeamColors;
  teamIdx: 0 | 1;
  playerIdx: number;
  player: MatchPlayer;
};

export function PlayerMesh({
  colors,
  teamIdx,
  playerIdx,
  player,
  model,
}: { model: Object3D } & PlayerProps) {
  const { nodes, materials } = useGraph(model) as GLTFResult;

  const bodyMaterial = materials.Ch38_body;
  const shortsMaterial = useMaterialClone(materials.Ch38_body, colors.shorts);
  const socksMaterial = useMaterialClone(materials.Ch38_body, colors.socks);

  const canvasTextureRef = useRef<CanvasTexture>(null);
  const canvasRef = useRef(
    (() => {
      const c = document.createElement("canvas");
      c.width = 512;
      c.height = 512;
      return c;
    })()
  );
  const canvasCtx = useRef(canvasRef.current.getContext("2d"));
  const canvaMaterialRef = useRef<MeshPhysicalMaterial>(null);

  // shirt material
  useLayoutEffect(() => {
    if (!materials.Shirt_Material?.map?.image) return;
    if (!canvasCtx.current) return;
    paintOnCanvas(
      materials.Shirt_Material.map.image,
      canvasRef.current,
      canvasCtx.current,
      colors,
      player
    );
    if (canvasTextureRef.current) canvasTextureRef.current.needsUpdate = true;
  }, [materials.Shirt_Material, colors, player]);

  return (
    <group
      name={`Player-${teamIdx}-${playerIdx}`}
      rotation={[Math.PI / 2, 0, 0]}
      scale={0.01}
      dispose={null}
      raycast={() => null}
    >
      <primitive object={nodes.mixamorig5Hips} />
      <skinnedMesh
        name="Ch38_Body"
        geometry={nodes.Ch38_Body.geometry}
        material={bodyMaterial}
        skeleton={nodes.Ch38_Body.skeleton}
        raycast={() => null}
      >
        {/* <meshPhysicalMaterial
          side={0}
          color={player.skinColor}
          map={bodyMaterial.map}
        /> */}
      </skinnedMesh>
      <skinnedMesh
        name="Ch38_Shirt"
        geometry={nodes.Ch38_Shirt.geometry}
        skeleton={nodes.Ch38_Shirt.skeleton}
        raycast={() => null}
      >
        <meshPhysicalMaterial ref={canvaMaterialRef} side={0}>
          <canvasTexture
            ref={canvasTextureRef}
            attach="map"
            image={canvasRef.current}
            wrapS={RepeatWrapping}
            wrapT={RepeatWrapping}
            flipY={false}
          />
        </meshPhysicalMaterial>
      </skinnedMesh>

      <skinnedMesh
        name="Ch38_Shorts"
        geometry={nodes.Ch38_Shorts.geometry}
        material={shortsMaterial}
        skeleton={nodes.Ch38_Shorts.skeleton}
        raycast={() => null}
        castShadow
      />
      <skinnedMesh
        name="Ch38_Socks"
        geometry={nodes.Ch38_Socks.geometry}
        material={socksMaterial}
        skeleton={nodes.Ch38_Socks.skeleton}
        raycast={() => null}
      />
      <skinnedMesh
        name="Ch38_Shoes"
        geometry={nodes.Ch38_Shoes.geometry}
        material={bodyMaterial}
        skeleton={nodes.Ch38_Shoes.skeleton}
        raycast={() => null}
      />
    </group>
  );
}
function paintOnCanvas(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  srcImg: any,
  canvas: HTMLCanvasElement,
  ctx: CanvasRenderingContext2D,
  colors: TeamColors,
  player: MatchPlayer
) {
  canvas.width = srcImg.width;
  canvas.height = srcImg.height;

  // ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(srcImg, 0.0, 0.0);
  ctx.fillStyle = colors.shirt.toString() + "f0";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // number
  ctx.font = "bold 100px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  ctx.fillStyle = colors.text.toString();
  ctx.fillText(player.shirtNumber, 120, 350);
  // name
  ctx.font = "normal 20px Arial";
  ctx.fillText(player.name.split(" ").reverse()[0].slice(0, 20), 120, 280, 150);
}
